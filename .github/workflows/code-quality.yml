# ─────────────────────────────────────────────────────────────────────────────
# SAGE OS — Copyright (c) 2025 Ashish Vasant Yesale (ashishyesale007@gmail.com)
# SPDX-License-Identifier: BSD-3-Clause OR Proprietary
# SAGE OS is dual-licensed under the BSD 3-Clause License and a Commercial License.
#
# This file is part of the SAGE OS Project.
#
# ─────────────────────────────────────────────────────────────────────────────
# Licensing:
# -----------
#
#
#   Licensed under the BSD 3-Clause License or a Commercial License.          
#   You may use this file under the terms of either license as specified in: 
#
#      - BSD 3-Clause License (see ./LICENSE)                           
#      - Commercial License (see ./COMMERCIAL_TERMS.md or contact legal@your.org)  
#
#   Redistribution and use in source and binary forms, with or without       
#   modification, are permitted under the BSD license provided that the      
#   following conditions are met:                                            
#
#     * Redistributions of source code must retain the above copyright       
#       notice, this list of conditions and the following disclaimer.       
#     * Redistributions in binary form must reproduce the above copyright    
#       notice, this list of conditions and the following disclaimer in the  
#       documentation and/or other materials provided with the distribution. 
#     * Neither the name of the project nor the names of its contributors    
#       may be used to endorse or promote products derived from this         
#       software without specific prior written permission.                  
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  
#   IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED    
#   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A          
#   PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER 
#   OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
#   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,      
#   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR       
#   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF   
#   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING     
#   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS       
#   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  
#
# By using this software, you agree to be bound by the terms of either license.
#
# Alternatively, commercial use with extended rights is available — contact the author for commercial licensing.
#
# ─────────────────────────────────────────────────────────────────────────────
# Contributor Guidelines:
# ------------------------
# Contributions are welcome under the terms of the Developer Certificate of Origin (DCO).
# All contributors must certify that they have the right to submit the code and agree to
# release it under the above license terms.
#
# Contributions must:
#   - Be original or appropriately attributed
#   - Include clear documentation and test cases where applicable
#   - Respect the coding and security guidelines defined in CONTRIBUTING.md
#
# ─────────────────────────────────────────────────────────────────────────────
# Terms of Use and Disclaimer:
# -----------------------------
# This software is provided "as is", without any express or implied warranty.
# In no event shall the authors, contributors, or copyright holders
# be held liable for any damages arising from the use of this software.
#
# Use of this software in critical systems (e.g., medical, nuclear, safety)
# is entirely at your own risk unless specifically licensed for such purposes.
#
# ─────────────────────────────────────────────────────────────────────────────
#

name: Code Quality

on:
  push:
    branches: [ main, origin, rpi5-os-implementation ]
  pull_request:
    branches: [ main, origin ]
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cppcheck
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          # Create symlink for aarch64-1inux-gnu-gcc to fix build issue
          sudo ln -sf /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-1inux-gnu-gcc
          sudo ln -sf /usr/bin/aarch64-linux-gnu-ld /usr/bin/aarch64-1inux-gnu-ld
          sudo ln -sf /usr/bin/aarch64-linux-gnu-objcopy /usr/bin/aarch64-1inux-gnu-objcopy
      
      - name: Check C code style
        run: |
          # Check for common C code issues
          find . -name "*.c" -o -name "*.h" | xargs grep -l "printf(" | while read file; do
            echo "Checking $file for printf format specifiers..."
            # Check for %d with size_t (should be %zu)
            if grep -n "printf.*%d.*size_t" "$file"; then
              echo "Warning: Found %d with size_t in $file. Use %zu instead."
            fi
            
            # Check for %x with pointers (should be %p)
            if grep -n "printf.*%x.*\*" "$file"; then
              echo "Warning: Found %x with pointer in $file. Use %p instead."
            fi
          done
      
      - name: Run cppcheck
        run: |
          cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=0 \
                  --inline-suppr kernel/ drivers/ boot/ 2>cppcheck-result.txt
          
          # Display results but don't fail the build
          cat cppcheck-result.txt
          
          # Count errors and warnings
          ERROR_COUNT=$(grep -c "error:" cppcheck-result.txt || true)
          WARNING_COUNT=$(grep -c "warning:" cppcheck-result.txt || true)
          
          echo "Found $ERROR_COUNT errors and $WARNING_COUNT warnings"
          
          # Only fail on errors, not warnings
          if [ "$ERROR_COUNT" -gt 0 ]; then
            exit 1
          fi
          
      - name: Check for missing includes
        run: |
          find . -name "*.c" -o -name "*.h" | xargs grep -l "#include" | while read file; do
            echo "Checking $file for missing includes..."
            gcc -fsyntax-only -Wall -Wextra -I. -I./kernel -I./drivers $file || true
          done

      - name: Check for preprocessor directive errors
        run: |
          find . -name "*.h" | while read file; do
            echo "Checking $file for preprocessor directive errors..."
            if grep -q "#ifndef" "$file" && ! grep -q "#endif" "$file"; then
              echo "Error: Missing #endif in $file"
              exit 1
            fi
          done

      - name: Check for integer overflow
        run: |
          find . -name "*.c" | xargs grep -l "malloc" | while read file; do
            echo "Checking $file for integer overflow in memory allocation..."
            if grep -q "malloc.*\*" "$file"; then
              echo "Warning: Potential integer overflow in malloc in $file"
            fi
          done
          
      - name: Check for format string vulnerabilities
        run: |
          find . -name "*.c" | xargs grep -l "printf\|sprintf\|fprintf" | while read file; do
            echo "Checking $file for format string vulnerabilities..."
            if grep -q "printf(.*)" "$file" || grep -q "sprintf(.*)" "$file" || grep -q "fprintf(.*)" "$file"; then
              echo "Warning: Potential format string vulnerability in $file"
            fi
          done

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu
          # Create symlink for aarch64-1inux-gnu-gcc to fix build issue
          sudo ln -sf /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-1inux-gnu-gcc
          sudo ln -sf /usr/bin/aarch64-linux-gnu-ld /usr/bin/aarch64-1inux-gnu-ld
          sudo ln -sf /usr/bin/aarch64-linux-gnu-objcopy /usr/bin/aarch64-1inux-gnu-objcopy
      
      - name: Build kernel
        run: make clean && make
      
      - name: Test with QEMU (if possible)
        run: |
          if command -v qemu-system-aarch64 >/dev/null 2>&1; then
            sudo apt-get install -y qemu-system-arm
            # Run a simple test with QEMU
            # This is just a placeholder - adjust as needed for your project
            echo "QEMU test would go here"
          else
            echo "QEMU not available, skipping test"
          fi
