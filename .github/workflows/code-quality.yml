name: Code Quality

on:
  push:
    branches: [ main, origin, rpi5-os-implementation ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cppcheck
      
      - name: Check C code style
        run: |
          # Check for common C code issues
          find . -name "*.c" -o -name "*.h" | xargs grep -l "printf(" | while read file; do
            echo "Checking $file for printf format specifiers..."
            # Check for %d with size_t (should be %zu)
            if grep -n "printf.*%d.*size_t" "$file"; then
              echo "Warning: Found %d with size_t in $file. Use %zu instead."
            fi
            
            # Check for %x with pointers (should be %p)
            if grep -n "printf.*%x.*\*" "$file"; then
              echo "Warning: Found %x with pointer in $file. Use %p instead."
            fi
          done
      
      - name: Run cppcheck
        run: |
          # Create include path for header files
          mkdir -p include
          mkdir -p include/ai_hat
          mkdir -p include/ai
          cp kernel/*.h include/ || true
          cp drivers/*.h include/ || true
          cp drivers/ai_hat/*.h include/ai_hat/ || true
          cp kernel/ai/*.h include/ai/ || true
          
          # Run cppcheck with include path
          cppcheck --enable=all --suppress=missingIncludeSystem --error-exitcode=0 \
                  --inline-suppr --include=include \
                  -I include kernel/ drivers/ boot/ 2>cppcheck-result.txt || true
          
          # Display results but don't fail the build
          cat cppcheck-result.txt
          
          # Count errors and warnings
          ERROR_COUNT=$(grep -c "error:" cppcheck-result.txt || true)
          WARNING_COUNT=$(grep -c "warning:" cppcheck-result.txt || true)
          
          echo "Found $ERROR_COUNT errors and $WARNING_COUNT warnings"
          
          # Ignore specific errors that are false positives
          REAL_ERRORS=$(grep "error:" cppcheck-result.txt | grep -v "preprocessorErrorDirective" | wc -l || true)
          
          echo "Found $REAL_ERRORS real errors (excluding preprocessor directives)"
          
          # Only fail on real errors, not warnings or preprocessor directive errors
          if [ "$REAL_ERRORS" -gt 0 ]; then
            exit 1
          fi