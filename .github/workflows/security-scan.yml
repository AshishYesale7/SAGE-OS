# ─────────────────────────────────────────────────────────────────────────────
# SAGE OS — Copyright (c) 2025 Ashish Vasant Yesale (ashishyesale007@gmail.com)
# SPDX-License-Identifier: BSD-3-Clause OR Proprietary
# SAGE OS is dual-licensed under the BSD 3-Clause License and a Commercial License.
# 
# This file is part of the SAGE OS Project.
# ─────────────────────────────────────────────────────────────────────────────

name: Security Scanning

on:
  push:
    branches: [ main, dev, security/* ]
  pull_request:
    branches: [ main, dev ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - cve
          - static
          - binary
          - dependencies

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # CVE Binary Scanning
  cve-scan:
    name: CVE Binary Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'cve' || github.event.inputs.scan_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install CVE Binary Tool
      run: |
        python -m pip install --upgrade pip
        pip install cve-bin-tool
        
    - name: Update CVE Database
      run: |
        cve-bin-tool --update now
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*-build-*'
        merge-multiple: true
      continue-on-error: true
      
    - name: Run CVE scan on binaries
      run: |
        mkdir -p security/reports
        
        # Scan build artifacts if available
        if [ -d "build" ]; then
          echo "Scanning build directory..."
          cve-bin-tool \
            --config .cve-bin-tool.toml \
            --format json \
            --output-file security/reports/cve-build-scan.json \
            build/ || echo "Build scan completed with warnings"
        fi
        
        # Scan any ELF binaries
        find . -name "*.bin" -o -name "*.elf" -o -name "*.img" | head -10 | while read binary; do
          echo "Scanning $binary..."
          cve-bin-tool \
            --format json \
            --output-file "security/reports/cve-$(basename $binary).json" \
            "$binary" || echo "Scan of $binary completed with warnings"
        done
        
    - name: Generate CVE HTML Report
      run: |
        if [ -f "security/reports/cve-build-scan.json" ]; then
          cve-bin-tool \
            --config .cve-bin-tool.toml \
            --format html \
            --output-file security/reports/cve-report.html \
            build/ || echo "HTML report generation completed with warnings"
        fi
        
    - name: Upload CVE scan results
      uses: actions/upload-artifact@v4
      with:
        name: cve-scan-results
        path: security/reports/
        retention-days: 30
        
    - name: Check for critical vulnerabilities
      run: |
        if [ -f "security/reports/cve-build-scan.json" ]; then
          critical_count=$(jq '[.[] | select(.severity == "CRITICAL")] | length' security/reports/cve-build-scan.json 2>/dev/null || echo "0")
          high_count=$(jq '[.[] | select(.severity == "HIGH")] | length' security/reports/cve-build-scan.json 2>/dev/null || echo "0")
          
          echo "Critical vulnerabilities: $critical_count"
          echo "High vulnerabilities: $high_count"
          
          if [ "$critical_count" -gt 0 ]; then
            echo "::error::Found $critical_count critical vulnerabilities"
            exit 1
          fi
          
          if [ "$high_count" -gt 5 ]; then
            echo "::warning::Found $high_count high severity vulnerabilities (threshold: 5)"
          fi
        fi

  # Static Code Analysis
  static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'static' || github.event.inputs.scan_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          cppcheck \
          clang-tools \
          clang-tidy \
          flawfinder \
          rats \
          splint || true
          
    - name: Run Cppcheck
      run: |
        mkdir -p security/reports
        cppcheck \
          --enable=all \
          --inconclusive \
          --xml \
          --xml-version=2 \
          --output-file=security/reports/cppcheck.xml \
          kernel/ boot/ drivers/ 2>&1 || true
          
    - name: Run Clang Static Analyzer
      run: |
        if command -v scan-build &> /dev/null; then
          scan-build \
            --output-dir security/reports/clang-analyzer \
            --html-title "SAGE OS Static Analysis" \
            make clean || true
          scan-build \
            --output-dir security/reports/clang-analyzer \
            --html-title "SAGE OS Static Analysis" \
            make ARCH=x86_64 || true
        fi
        
    - name: Run Flawfinder
      run: |
        if command -v flawfinder &> /dev/null; then
          flawfinder \
            --html \
            --output security/reports/flawfinder.html \
            kernel/ boot/ drivers/ || true
        fi
        
    - name: Security pattern analysis
      run: |
        mkdir -p security/reports
        
        echo "# SAGE OS Security Pattern Analysis" > security/reports/security-patterns.md
        echo "Generated: $(date)" >> security/reports/security-patterns.md
        echo "" >> security/reports/security-patterns.md
        
        echo "## Unsafe C Functions" >> security/reports/security-patterns.md
        echo "\`\`\`" >> security/reports/security-patterns.md
        grep -r -n -E "(strcpy|strcat|sprintf|gets|scanf)" \
          kernel/ boot/ drivers/ 2>/dev/null || true >> security/reports/security-patterns.md
        echo "\`\`\`" >> security/reports/security-patterns.md
        echo "" >> security/reports/security-patterns.md
        
        echo "## Potential Hardcoded Secrets" >> security/reports/security-patterns.md
        echo "\`\`\`" >> security/reports/security-patterns.md
        grep -r -n -i -E "(password|passwd|secret|key|token)" \
          --exclude-dir=.git --exclude-dir=docs --exclude="*.md" \
          . 2>/dev/null | head -20 || true >> security/reports/security-patterns.md
        echo "\`\`\`" >> security/reports/security-patterns.md
        
    - name: Upload static analysis results
      uses: actions/upload-artifact@v4
      with:
        name: static-analysis-results
        path: security/reports/
        retention-days: 30

  # Binary Security Analysis
  binary-analysis:
    name: Binary Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'binary' || github.event.inputs.scan_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install binary analysis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          binutils \
          file \
          strings \
          objdump \
          readelf \
          nm \
          checksec || true
          
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*-build-*'
        merge-multiple: true
      continue-on-error: true
      
    - name: Analyze binary security features
      run: |
        mkdir -p security/reports
        
        echo "# SAGE OS Binary Security Analysis" > security/reports/binary-analysis.md
        echo "Generated: $(date)" >> security/reports/binary-analysis.md
        echo "" >> security/reports/binary-analysis.md
        
        # Find all binaries
        find . -type f \( -name "*.bin" -o -name "*.elf" -o -name "*.img" \) \
          -not -path "*/.git/*" | while read binary; do
          
          echo "## Analysis: $binary" >> security/reports/binary-analysis.md
          echo "" >> security/reports/binary-analysis.md
          
          echo "### File Information" >> security/reports/binary-analysis.md
          echo "\`\`\`" >> security/reports/binary-analysis.md
          file "$binary" 2>/dev/null || true >> security/reports/binary-analysis.md
          echo "\`\`\`" >> security/reports/binary-analysis.md
          echo "" >> security/reports/binary-analysis.md
          
          # Security features for ELF files
          if file "$binary" | grep -q "ELF"; then
            echo "### Security Features" >> security/reports/binary-analysis.md
            echo "\`\`\`" >> security/reports/binary-analysis.md
            
            # Stack canaries
            if readelf -s "$binary" 2>/dev/null | grep -q "__stack_chk_fail"; then
              echo "Stack canaries: ENABLED" >> security/reports/binary-analysis.md
            else
              echo "Stack canaries: DISABLED" >> security/reports/binary-analysis.md
            fi
            
            # NX bit
            if readelf -l "$binary" 2>/dev/null | grep -q "GNU_STACK.*RWE"; then
              echo "NX bit: DISABLED (executable stack)" >> security/reports/binary-analysis.md
            else
              echo "NX bit: ENABLED" >> security/reports/binary-analysis.md
            fi
            
            # PIE
            if readelf -h "$binary" 2>/dev/null | grep -q "Type:.*DYN"; then
              echo "PIE: ENABLED" >> security/reports/binary-analysis.md
            else
              echo "PIE: DISABLED" >> security/reports/binary-analysis.md
            fi
            
            # RELRO
            if readelf -l "$binary" 2>/dev/null | grep -q "GNU_RELRO"; then
              echo "RELRO: ENABLED" >> security/reports/binary-analysis.md
            else
              echo "RELRO: DISABLED" >> security/reports/binary-analysis.md
            fi
            
            echo "\`\`\`" >> security/reports/binary-analysis.md
            echo "" >> security/reports/binary-analysis.md
          fi
          
          echo "---" >> security/reports/binary-analysis.md
          echo "" >> security/reports/binary-analysis.md
        done
        
    - name: Upload binary analysis results
      uses: actions/upload-artifact@v4
      with:
        name: binary-analysis-results
        path: security/reports/
        retention-days: 30

  # Dependency Security Analysis
  dependency-analysis:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Rust (for cargo audit)
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
      continue-on-error: true
      
    - name: Install dependency analysis tools
      run: |
        # Install cargo audit for Rust dependencies
        if command -v cargo &> /dev/null; then
          cargo install cargo-audit || true
        fi
        
        # Install other tools
        sudo apt-get update
        sudo apt-get install -y \
          python3-pip \
          npm || true
          
        # Install Python security tools
        pip3 install --user safety bandit || true
        
    - name: Run Rust dependency audit
      run: |
        mkdir -p security/reports
        
        if command -v cargo &> /dev/null && [ -f "Cargo.toml" ]; then
          echo "Running Rust dependency audit..."
          cargo audit --format json > security/reports/cargo-audit.json 2>&1 || true
          cargo audit > security/reports/cargo-audit.txt 2>&1 || true
        fi
        
    - name: Analyze build dependencies
      run: |
        echo "# SAGE OS Dependency Analysis" > security/reports/dependency-analysis.md
        echo "Generated: $(date)" >> security/reports/dependency-analysis.md
        echo "" >> security/reports/dependency-analysis.md
        
        echo "## Build System Dependencies" >> security/reports/dependency-analysis.md
        echo "\`\`\`" >> security/reports/dependency-analysis.md
        
        # Makefile dependencies
        if [ -f "Makefile" ]; then
          echo "=== Makefile Variables ===" >> security/reports/dependency-analysis.md
          grep -E "^[A-Z_]+\s*=" Makefile | head -20 >> security/reports/dependency-analysis.md
        fi
        
        # Cargo dependencies
        if [ -f "Cargo.toml" ]; then
          echo "=== Rust Dependencies ===" >> security/reports/dependency-analysis.md
          grep -A 20 "\[dependencies\]" Cargo.toml || true >> security/reports/dependency-analysis.md
        fi
        
        echo "\`\`\`" >> security/reports/dependency-analysis.md
        
    - name: Upload dependency analysis results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-analysis-results
        path: security/reports/
        retention-days: 30

  # Security Summary Report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [cve-scan, static-analysis, binary-analysis, dependency-analysis]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all security reports
      uses: actions/download-artifact@v4
      with:
        pattern: '*-results'
        merge-multiple: true
        path: security/reports/
      continue-on-error: true
      
    - name: Generate security summary
      run: |
        mkdir -p security/reports
        
        cat > security/reports/security-summary.md << 'EOF'
        # SAGE OS Security Scan Summary
        
        **Generated:** $(date)
        **Workflow:** ${{ github.workflow }}
        **Run ID:** ${{ github.run_id }}
        
        ## Scan Results Overview
        
        | Scan Type | Status | Reports |
        |-----------|--------|---------|
        | CVE Binary Scan | ${{ needs.cve-scan.result }} | [View Reports](./cve-scan-results/) |
        | Static Analysis | ${{ needs.static-analysis.result }} | [View Reports](./static-analysis-results/) |
        | Binary Analysis | ${{ needs.binary-analysis.result }} | [View Reports](./binary-analysis-results/) |
        | Dependency Analysis | ${{ needs.dependency-analysis.result }} | [View Reports](./dependency-analysis-results/) |
        
        ## Key Findings
        
        ### Critical Issues
        - Review CVE scan results for critical vulnerabilities
        - Check binary security features (stack canaries, NX bit, PIE, RELRO)
        - Validate dependency security status
        
        ### Recommendations
        1. Address any critical or high severity vulnerabilities immediately
        2. Enable security hardening features for all binaries
        3. Regularly update dependencies and monitor for new vulnerabilities
        4. Implement security testing in development workflow
        
        ## Next Steps
        1. Review detailed reports in each category
        2. Prioritize fixes based on severity and impact
        3. Update security policies and procedures as needed
        4. Schedule regular security reviews
        
        EOF
        
    - name: Upload security summary
      uses: actions/upload-artifact@v4
      with:
        name: security-summary
        path: security/reports/security-summary.md
        retention-days: 90
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'security/reports/security-summary.md';
          
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${summary}`
            });
          }
      continue-on-error: true