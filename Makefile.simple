# SAGE OS - Simple Unified Build System
# Usage: make [ARCH=x86_64|aarch64|arm|riscv64] [TARGET=generic|rpi4|rpi5]

# Default values
ARCH ?= x86_64
TARGET ?= generic

# Detect host OS
UNAME_S := $(shell uname -s)
ifeq ($(UNAME_S),Darwin)
    HOST_OS = macos
else
    HOST_OS = linux
endif

# Architecture configuration
ifeq ($(ARCH),x86_64)
    CROSS_PREFIX = x86_64-linux-gnu-
    QEMU_SYSTEM = qemu-system-i386
    QEMU_ARGS = -kernel build/$(ARCH)/kernel.elf -nographic
    CFLAGS_ARCH = -m32 -fno-pic -fno-stack-protector
    LDFLAGS_ARCH = -m elf_i386
    BOOT_FILE = boot/boot_with_multiboot.S
else ifeq ($(ARCH),aarch64)
    CROSS_PREFIX = aarch64-linux-gnu-
    QEMU_SYSTEM = qemu-system-aarch64
    QEMU_ARGS = -M virt -cpu cortex-a72 -m 1G -kernel build/$(ARCH)/kernel.img -nographic
    CFLAGS_ARCH = -mcpu=cortex-a72
    BOOT_FILE = boot/boot_aarch64.S
else ifeq ($(ARCH),arm)
    CROSS_PREFIX = arm-linux-gnueabihf-
    QEMU_SYSTEM = qemu-system-arm
    QEMU_ARGS = -M versatilepb -cpu arm1176 -m 256M -kernel build/$(ARCH)/kernel.img -nographic
    CFLAGS_ARCH = -mcpu=cortex-a7 -mfpu=neon-vfpv4 -mfloat-abi=hard
    BOOT_FILE = boot/boot_arm.S
else ifeq ($(ARCH),riscv64)
    CROSS_PREFIX = riscv64-unknown-linux-gnu-
    QEMU_SYSTEM = qemu-system-riscv64
    QEMU_ARGS = -M virt -cpu rv64 -m 1G -kernel build/$(ARCH)/kernel.img -nographic
    CFLAGS_ARCH = -march=rv64imac_zicsr -mabi=lp64
    BOOT_FILE = boot/boot_riscv64.S
else
    $(error Unsupported architecture: $(ARCH))
endif

# Toolchain
ifeq ($(HOST_OS),macos)
    TOOLCHAIN_PATH = /opt/homebrew/bin
else
    TOOLCHAIN_PATH = /usr/bin
endif

CC = $(TOOLCHAIN_PATH)/$(CROSS_PREFIX)gcc
LD = $(TOOLCHAIN_PATH)/$(CROSS_PREFIX)ld
OBJCOPY = $(TOOLCHAIN_PATH)/$(CROSS_PREFIX)objcopy

# Directories
BUILD_DIR = build/$(ARCH)
SRC_DIRS = kernel drivers

# Source files (exclude kernel_graphics.c to avoid conflicts)
C_SOURCES = $(shell find $(SRC_DIRS) -name "*.c" ! -name "kernel_graphics.c")
ASM_SOURCES = $(BOOT_FILE)
OBJECTS = $(C_SOURCES:%.c=$(BUILD_DIR)/%.o) $(ASM_SOURCES:%.S=$(BUILD_DIR)/%.o)

# Compiler flags
CFLAGS = -nostdlib -nostartfiles -ffreestanding -O2 -Wall -Wextra \
         -I. -Ikernel -Idrivers $(CFLAGS_ARCH) \
         -DARCH_$(shell echo $(ARCH) | tr '[:lower:]' '[:upper:]')

LDFLAGS = -T linker.ld -nostdlib $(LDFLAGS_ARCH)

# Default target
all: check-deps $(BUILD_DIR)/kernel.img
	@echo "‚úÖ $(ARCH) kernel built successfully!"
	@ls -lh $(BUILD_DIR)/kernel.*

# Check dependencies
check-deps:
	@echo "üîç Checking dependencies for $(ARCH)..."
	@if ! command -v $(CC) >/dev/null 2>&1; then \
		echo "‚ùå Cross-compiler $(CC) not found!"; \
		echo "üí° Install with: brew install $(CROSS_PREFIX)gcc" ; \
		exit 1; \
	fi
	@if ! command -v $(QEMU_SYSTEM) >/dev/null 2>&1; then \
		echo "‚ö†Ô∏è  QEMU $(QEMU_SYSTEM) not found (testing will not work)"; \
	fi
	@echo "‚úÖ Dependencies OK for $(ARCH)"

# Build kernel image
$(BUILD_DIR)/kernel.img: $(BUILD_DIR)/kernel.elf
	@echo "üì¶ Creating kernel image..."
	@$(OBJCOPY) -O binary $< $@

# Link kernel
$(BUILD_DIR)/kernel.elf: $(OBJECTS)
	@echo "üîó Linking $(ARCH) kernel..."
	@$(LD) $(LDFLAGS) $^ -o $@

# Compile C sources
$(BUILD_DIR)/%.o: %.c | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	@echo "üî® CC [$(ARCH)] $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Compile assembly sources
$(BUILD_DIR)/%.o: %.S | $(BUILD_DIR)
	@mkdir -p $(dir $@)
	@echo "‚öôÔ∏è  AS [$(ARCH)] $<"
	@$(CC) $(CFLAGS) -c $< -o $@

# Create build directory
$(BUILD_DIR):
	@mkdir -p $(BUILD_DIR)

# Test in QEMU
test: $(BUILD_DIR)/kernel.img
	@echo "üß™ Testing $(ARCH) kernel in QEMU..."
	@echo "Command: $(QEMU_SYSTEM) $(QEMU_ARGS)"
	@timeout 10 $(QEMU_SYSTEM) $(QEMU_ARGS) || echo "‚è∞ Test completed (timeout)"

# Build all architectures
all-arch:
	@echo "üèóÔ∏è  Building all architectures..."
	@for arch in x86_64 aarch64 arm; do \
		echo "Building $$arch..."; \
		$(MAKE) -f Makefile.simple ARCH=$$arch || echo "‚ùå $$arch failed"; \
	done
	@if command -v riscv64-unknown-linux-gnu-gcc >/dev/null 2>&1; then \
		echo "Building riscv64..."; \
		$(MAKE) -f Makefile.simple ARCH=riscv64 || echo "‚ùå riscv64 failed"; \
	else \
		echo "‚ö†Ô∏è  Skipping riscv64 (toolchain not found)"; \
	fi

# Clean
clean:
	@echo "üßπ Cleaning build files..."
	@rm -rf build/

# Install dependencies (macOS)
install-deps-macos:
	@echo "üçé Installing macOS dependencies..."
	@brew install qemu
	@brew install x86_64-elf-gcc
	@brew install aarch64-elf-gcc
	@brew install arm-none-eabi-gcc
	@echo "üí° For RISC-V: brew install riscv64-elf-gcc"

# Help
help:
	@echo "SAGE OS Build System"
	@echo "===================="
	@echo ""
	@echo "Basic Usage:"
	@echo "  make                    # Build x86_64 (default)"
	@echo "  make ARCH=aarch64       # Build ARM64"
	@echo "  make ARCH=arm           # Build ARM32"
	@echo "  make ARCH=riscv64       # Build RISC-V"
	@echo ""
	@echo "Testing:"
	@echo "  make test               # Test current arch in QEMU"
	@echo "  make test ARCH=aarch64  # Test specific arch"
	@echo ""
	@echo "Batch Operations:"
	@echo "  make all-arch           # Build all architectures"
	@echo "  make clean              # Clean all builds"
	@echo ""
	@echo "Setup (macOS):"
	@echo "  make install-deps-macos # Install toolchains"

.PHONY: all check-deps test all-arch clean install-deps-macos help