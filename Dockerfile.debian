# SAGE OS Docker Image - Debian 12 (bookworm) Environment
# Matches the runtime environment: Debian GNU/Linux 12 (bookworm) x86_64
FROM debian:12-slim

# Set environment variables to avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

# Set working directory
WORKDIR /workspace

# Update package lists and install essential packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core system tools
    ca-certificates \
    curl \
    wget \
    git \
    build-essential \
    gcc \
    make \
    nasm \
    binutils \
    # QEMU and virtualization
    qemu-system-x86 \
    qemu-system-arm \
    qemu-system-misc \
    qemu-utils \
    # VNC and graphics support
    tigervnc-standalone-server \
    tigervnc-common \
    xvfb \
    x11vnc \
    fluxbox \
    xterm \
    # Network tools
    socat \
    netcat-openbsd \
    telnet \
    # Development tools
    vim \
    nano \
    htop \
    tree \
    file \
    strace \
    gdb \
    # Python for development
    python3 \
    python3-pip \
    # Additional utilities
    procps \
    psmisc \
    lsof \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create sage user with same UID/GID as typical container environments
RUN groupadd -g 1000 sage && \
    useradd -u 1000 -g 1000 -m -s /bin/bash sage && \
    mkdir -p /home/sage/.vnc /home/sage/sage-os /workspace && \
    chown -R sage:sage /home/sage /workspace

# Set VNC password (default: sageos)
RUN echo "sageos" | vncpasswd -f > /home/sage/.vnc/passwd && \
    chmod 600 /home/sage/.vnc/passwd && \
    chown sage:sage /home/sage/.vnc/passwd

# Create VNC startup script
RUN cat > /home/sage/.vnc/xstartup << 'EOF'
#!/bin/bash
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
exec fluxbox
EOF

RUN chmod +x /home/sage/.vnc/xstartup && \
    chown sage:sage /home/sage/.vnc/xstartup

# Copy SAGE OS source code
COPY --chown=sage:sage . /workspace/sage-os/

# Create comprehensive startup script
RUN cat > /usr/local/bin/sage-os-runner << 'EOF'
#!/bin/bash

# SAGE OS Runner Script for Debian Environment
# Matches runtime environment specifications

set -e

# Configuration
SAGE_OS_DIR="/workspace/sage-os"
VNC_DISPLAY=":1"
VNC_PORT="5901"
QEMU_MONITOR_PORT="1234"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show environment information
show_environment() {
    log_info "SAGE OS Runtime Environment"
    log_info "=========================="
    echo "Architecture: $(uname -m)"
    echo "Kernel: $(uname -r)"
    echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
    echo "CPU Cores: $(nproc)"
    echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
    echo "Disk Space: $(df -h /workspace | tail -1 | awk '{print $4}') available"
    echo
}

# Start VNC server
start_vnc() {
    log_info "Starting VNC server on display $VNC_DISPLAY"
    
    # Kill any existing VNC sessions
    vncserver -kill $VNC_DISPLAY >/dev/null 2>&1 || true
    
    # Start VNC server
    vncserver $VNC_DISPLAY \
        -geometry 1024x768 \
        -depth 24 \
        -passwd /home/sage/.vnc/passwd \
        -localhost no
    
    log_success "VNC server started on port $VNC_PORT"
    log_info "Connect via: vnc://localhost:$VNC_PORT"
    log_info "Password: sageos"
}

# Find kernel file
find_kernel() {
    local arch="$1"
    local kernel_file=""
    
    cd "$SAGE_OS_DIR"
    
    log_info "Looking for kernel file for architecture: $arch"
    
    # Check various possible locations
    if ls output/$arch/sage-os-v*.elf >/dev/null 2>&1; then
        kernel_file=$(ls output/$arch/sage-os-v*.elf | head -1)
    elif [[ -f "build/$arch/kernel.elf" ]]; then
        kernel_file="build/$arch/kernel.elf"
    elif [[ -f "build/$arch/kernel.img" ]]; then
        kernel_file="build/$arch/kernel.img"
    elif [[ -f "output/$arch-graphics/kernel.elf" ]]; then
        kernel_file="output/$arch-graphics/kernel.elf"
    elif [[ -f "build/$arch-graphics/kernel.elf" ]]; then
        kernel_file="build/$arch-graphics/kernel.elf"
    else
        log_error "No kernel file found for architecture $arch"
        log_info "Available files:"
        find . -name "*.elf" -o -name "*.img" 2>/dev/null | head -10
        return 1
    fi
    
    if [[ ! -f "$kernel_file" ]]; then
        log_error "Kernel file not found: $kernel_file"
        return 1
    fi
    
    log_success "Found kernel file: $kernel_file"
    echo "$kernel_file"
}

# Run SAGE OS with QEMU
run_sage_os() {
    local arch="$1"
    local memory="$2"
    local display_mode="$3"
    
    cd "$SAGE_OS_DIR"
    
    # Find kernel file
    local kernel_file
    if ! kernel_file=$(find_kernel "$arch"); then
        return 1
    fi
    
    log_info "Starting SAGE OS..."
    log_info "  Architecture: $arch"
    log_info "  Memory: $memory"
    log_info "  Display Mode: $display_mode"
    log_info "  Kernel: $kernel_file"
    
    # QEMU command based on architecture
    local qemu_cmd=""
    local qemu_args=""
    
    case "$arch" in
        "i386"|"x86_64")
            qemu_cmd="qemu-system-i386"
            qemu_args="-kernel $kernel_file -m $memory"
            ;;
        "aarch64")
            qemu_cmd="qemu-system-aarch64"
            qemu_args="-M virt -cpu cortex-a57 -kernel $kernel_file -m $memory"
            ;;
        "arm")
            qemu_cmd="qemu-system-arm"
            qemu_args="-M versatilepb -kernel $kernel_file -m $memory"
            ;;
        "riscv64")
            qemu_cmd="qemu-system-riscv64"
            qemu_args="-M virt -kernel $kernel_file -m $memory"
            ;;
        *)
            log_error "Unsupported architecture: $arch"
            return 1
            ;;
    esac
    
    # Display configuration
    local display_args=""
    case "$display_mode" in
        "vnc")
            display_args="-vga std -vnc $VNC_DISPLAY,websocket=5700"
            ;;
        "text")
            display_args="-nographic"
            ;;
        "graphics")
            display_args="-vga std"
            ;;
        *)
            display_args="-vga std -vnc $VNC_DISPLAY"
            ;;
    esac
    
    # Additional QEMU arguments for better compatibility
    local extra_args="-no-reboot -boot n"
    
    # Add monitor for debugging
    if [[ "$display_mode" != "graphics" ]]; then
        extra_args="$extra_args -monitor telnet:0.0.0.0:$QEMU_MONITOR_PORT,server,nowait"
        log_info "QEMU monitor available at: telnet localhost $QEMU_MONITOR_PORT"
    fi
    
    # Final command
    local full_cmd="$qemu_cmd $qemu_args $display_args $extra_args"
    
    log_info "Executing: $full_cmd"
    echo
    log_success "Starting SAGE OS..."
    
    # Execute QEMU
    exec $full_cmd
}

# Main execution
main() {
    # Default values
    local arch="${1:-i386}"
    local memory="${2:-128M}"
    local display_mode="${3:-vnc}"
    
    show_environment
    
    case "$display_mode" in
        "vnc")
            start_vnc
            sleep 2
            run_sage_os "$arch" "$memory" "vnc"
            ;;
        "text")
            run_sage_os "$arch" "$memory" "text"
            ;;
        "graphics")
            run_sage_os "$arch" "$memory" "graphics"
            ;;
        *)
            log_error "Unknown display mode: $display_mode"
            log_info "Usage: $0 <arch> <memory> <display_mode>"
            log_info "  arch: i386, x86_64, aarch64, arm, riscv64"
            log_info "  memory: 128M, 256M, 512M, etc."
            log_info "  display_mode: vnc, text, graphics"
            exit 1
            ;;
    esac
}

# Run main function with arguments
main "$@"
EOF

# Make the runner script executable
RUN chmod +x /usr/local/bin/sage-os-runner

# Create environment info script
RUN cat > /usr/local/bin/show-env << 'EOF'
#!/bin/bash
echo "=== SAGE OS Container Environment ==="
echo "Architecture: $(uname -m)"
echo "Kernel: $(uname -r)"
echo "OS: $(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2)"
echo "CPU Cores: $(nproc)"
echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
echo "Disk Space: $(df -h /workspace | tail -1 | awk '{print $4}') available"
echo
echo "=== Available QEMU Systems ==="
ls /usr/bin/qemu-system-* | sed 's/.*qemu-system-//' | sort
echo
echo "=== SAGE OS Files ==="
find /workspace/sage-os -name "*.elf" -o -name "*.img" 2>/dev/null | head -10
echo
echo "=== Network Ports ==="
echo "VNC: 5901"
echo "WebSocket VNC: 5700"
echo "QEMU Monitor: 1234"
EOF

RUN chmod +x /usr/local/bin/show-env

# Switch to sage user
USER sage
WORKDIR /workspace/sage-os

# Expose ports for VNC, WebSocket VNC, and QEMU monitor
EXPOSE 5901 5700 1234

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD pgrep -f qemu-system || exit 1

# Default command
CMD ["/usr/local/bin/sage-os-runner", "i386", "128M", "vnc"]