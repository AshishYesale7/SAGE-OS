#!/usr/bin/env python3
# ─────────────────────────────────────────────────────────────────────────────
# SAGE OS — Copyright (c) 2025 Ashish Vasant Yesale (ashishyesale007@gmail.com)
# SPDX-License-Identifier: BSD-3-Clause OR Proprietary
# SAGE OS is dual-licensed under the BSD 3-Clause License and a Commercial License.
# 
# This file is part of the SAGE OS Project.
#
# ─────────────────────────────────────────────────────────────────────────────

"""
CVE Report Parser for SAGE OS

This script parses CVE scan reports and generates GitHub Actions summaries.
"""

import json
import sys
import argparse
from pathlib import Path
from typing import Dict, List, Any
from datetime import datetime

def parse_cve_report(report_path: str) -> Dict[str, Any]:
    """Parse CVE report JSON file."""
    try:
        with open(report_path, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"❌ Report file not found: {report_path}")
        return {}
    except json.JSONDecodeError as e:
        print(f"❌ Invalid JSON in report: {e}")
        return {}

def categorize_vulnerabilities(vulnerabilities: List[Dict]) -> Dict[str, List[Dict]]:
    """Categorize vulnerabilities by severity."""
    categories = {
        'critical': [],
        'high': [],
        'medium': [],
        'low': []
    }
    
    for vuln in vulnerabilities:
        severity = vuln.get('severity', 'unknown').lower()
        if severity in categories:
            categories[severity].append(vuln)
        else:
            categories['low'].append(vuln)
    
    return categories

def generate_summary_table(categories: Dict[str, List[Dict]]) -> str:
    """Generate a summary table for GitHub Actions."""
    total = sum(len(vulns) for vulns in categories.values())
    
    summary = f"""
| Severity | Count | Percentage |
|----------|-------|------------|
| 🔴 Critical | {len(categories['critical'])} | {len(categories['critical'])/max(total,1)*100:.1f}% |
| 🟠 High | {len(categories['high'])} | {len(categories['high'])/max(total,1)*100:.1f}% |
| 🟡 Medium | {len(categories['medium'])} | {len(categories['medium'])/max(total,1)*100:.1f}% |
| 🟢 Low | {len(categories['low'])} | {len(categories['low'])/max(total,1)*100:.1f}% |
| **Total** | **{total}** | **100%** |
"""
    return summary

def generate_detailed_report(categories: Dict[str, List[Dict]]) -> str:
    """Generate detailed vulnerability report."""
    report = ""
    
    for severity, vulns in categories.items():
        if not vulns:
            continue
            
        severity_emoji = {
            'critical': '🔴',
            'high': '🟠', 
            'medium': '🟡',
            'low': '🟢'
        }
        
        report += f"\n### {severity_emoji.get(severity, '⚪')} {severity.title()} Severity ({len(vulns)} issues)\n\n"
        
        for vuln in vulns[:5]:  # Limit to first 5 per severity
            cve_id = vuln.get('cve_id', 'Unknown')
            component = vuln.get('component', 'Unknown')
            description = vuln.get('description', 'No description available')[:100] + "..."
            
            report += f"- **{cve_id}** in `{component}`\n"
            report += f"  {description}\n\n"
        
        if len(vulns) > 5:
            report += f"  ... and {len(vulns) - 5} more {severity} severity issues\n\n"
    
    return report

def generate_recommendations(categories: Dict[str, List[Dict]]) -> str:
    """Generate security recommendations."""
    recommendations = "\n## 🛡️ Security Recommendations\n\n"
    
    critical_count = len(categories['critical'])
    high_count = len(categories['high'])
    
    if critical_count > 0:
        recommendations += f"⚠️ **URGENT**: {critical_count} critical vulnerabilities found!\n"
        recommendations += "- Immediate action required within 24 hours\n"
        recommendations += "- Consider halting deployment until resolved\n\n"
    
    if high_count > 0:
        recommendations += f"🔶 **HIGH PRIORITY**: {high_count} high severity vulnerabilities\n"
        recommendations += "- Address within 7 days\n"
        recommendations += "- Review security patches and updates\n\n"
    
    total_vulns = sum(len(vulns) for vulns in categories.values())
    if total_vulns == 0:
        recommendations += "✅ **EXCELLENT**: No vulnerabilities detected!\n"
        recommendations += "- Continue regular security monitoring\n"
        recommendations += "- Maintain current security practices\n\n"
    
    recommendations += "### Next Steps:\n"
    recommendations += "1. Review detailed vulnerability reports\n"
    recommendations += "2. Update affected components\n"
    recommendations += "3. Run security tests after fixes\n"
    recommendations += "4. Monitor for new vulnerabilities\n\n"
    
    return recommendations

def generate_compliance_status(categories: Dict[str, List[Dict]]) -> str:
    """Generate compliance status report."""
    critical_count = len(categories['critical'])
    high_count = len(categories['high'])
    
    status = "\n## 📋 Compliance Status\n\n"
    
    if critical_count == 0 and high_count == 0:
        status += "✅ **COMPLIANT** - No critical or high severity vulnerabilities\n\n"
        status += "| Standard | Status |\n"
        status += "|----------|--------|\n"
        status += "| NIST Cybersecurity Framework | ✅ Compliant |\n"
        status += "| ISO 27001 | ✅ Compliant |\n"
        status += "| CIS Controls | ✅ Compliant |\n"
    else:
        status += "❌ **NON-COMPLIANT** - Critical/High vulnerabilities present\n\n"
        status += "| Standard | Status | Action Required |\n"
        status += "|----------|--------|------------------|\n"
        status += f"| NIST Cybersecurity Framework | ❌ Non-Compliant | Fix {critical_count + high_count} vulnerabilities |\n"
        status += f"| ISO 27001 | ❌ Non-Compliant | Security review required |\n"
        status += f"| CIS Controls | ❌ Non-Compliant | Implement security controls |\n"
    
    return status

def generate_github_summary(report_data: Dict[str, Any]) -> str:
    """Generate complete GitHub Actions summary."""
    if not report_data:
        return "❌ No CVE report data available"
    
    vulnerabilities = report_data.get('vulnerabilities', [])
    categories = categorize_vulnerabilities(vulnerabilities)
    
    summary = "## 🔒 Security Scan Results\n\n"
    summary += f"**Scan Date**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}\n"
    summary += f"**Total Files Scanned**: {report_data.get('total_files', 'Unknown')}\n"
    summary += f"**Vulnerabilities Found**: {len(vulnerabilities)}\n\n"
    
    # Add summary table
    summary += "### 📊 Vulnerability Summary\n"
    summary += generate_summary_table(categories)
    
    # Add detailed report
    if vulnerabilities:
        summary += "\n### 🔍 Vulnerability Details\n"
        summary += generate_detailed_report(categories)
    
    # Add recommendations
    summary += generate_recommendations(categories)
    
    # Add compliance status
    summary += generate_compliance_status(categories)
    
    # Add footer
    summary += "\n---\n"
    summary += "*Generated by SAGE OS Security Scanner*\n"
    summary += f"*Report: {Path(sys.argv[1]).name if len(sys.argv) > 1 else 'Unknown'}*\n"
    
    return summary

def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Parse CVE scan reports for SAGE OS')
    parser.add_argument('report_file', help='Path to CVE report JSON file')
    parser.add_argument('--format', choices=['github', 'text', 'json'], default='github',
                       help='Output format (default: github)')
    parser.add_argument('--output', help='Output file (default: stdout)')
    
    args = parser.parse_args()
    
    # Parse the report
    report_data = parse_cve_report(args.report_file)
    
    if args.format == 'github':
        output = generate_github_summary(report_data)
    elif args.format == 'json':
        vulnerabilities = report_data.get('vulnerabilities', [])
        categories = categorize_vulnerabilities(vulnerabilities)
        output = json.dumps({
            'summary': {
                'total_vulnerabilities': len(vulnerabilities),
                'by_severity': {k: len(v) for k, v in categories.items()}
            },
            'categories': categories
        }, indent=2)
    else:  # text format
        vulnerabilities = report_data.get('vulnerabilities', [])
        categories = categorize_vulnerabilities(vulnerabilities)
        output = f"CVE Scan Results\n"
        output += f"================\n"
        output += f"Total vulnerabilities: {len(vulnerabilities)}\n"
        for severity, vulns in categories.items():
            output += f"{severity.title()}: {len(vulns)}\n"
    
    # Output results
    if args.output:
        with open(args.output, 'w') as f:
            f.write(output)
        print(f"Report written to {args.output}")
    else:
        print(output)

if __name__ == '__main__':
    main()